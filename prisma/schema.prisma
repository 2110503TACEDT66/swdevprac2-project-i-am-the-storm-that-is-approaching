// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Profile {
    id             String          @id @default(cuid())
    firstName      String?
    lastName       String?
    headline       String?
    bio            String?
    telephone      String?
    user           User?
}
model User {
  id            String    @id @default(cuid())
  accounts      Account[]
  applications  Application[]
  password      String?
  name          String?
  email         String?   @unique
  profile              Profile              @relation(fields: [profileId], references: [id])
  profileId            String               @unique
  role          String?
}

model Company {
  id          String      @id @default(cuid())
  name        String
  description String?     @db.Text
  industry    String?
  address     String?
  website     String?
  telephone   String?
  size        Int?
  jobListings JobListing[]
}


model JobListing {
  id            String        @id @default(cuid())
  companyId     String
  title         String
  description   String        @db.Text
  requirements  String        @db.Text
  location      String
  type          String     
  status        String      
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  expiresAt     DateTime
  company       Company       @relation(fields: [companyId], references: [id])
  applications  Application[] 

  @@index([companyId])
}


model Application {
  id           String   @id @default(cuid())
  userId       String
  jobListingId String
  status       String  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  reservedAt   DateTime?
  user         User     @relation(fields: [userId], references: [id])
  jobListing   JobListing @relation(fields: [jobListingId], references: [id])

  @@index([userId, jobListingId])
}


